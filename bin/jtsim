#!/bin/bash

# This file is part of JT_FRAME.
# JTFRAME program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# JTFRAME program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with JTFRAME.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jose Tejada Gomez. Twitter: @topapate
# Date: 20-8-2022

DUMP=
FIRMWARE=gng_test.s
SIM_MS=1
SIMULATOR=modelsim
TOP=game_test
TARGET=
FILES=
MIST_PLL=
DEFFILE=
PLL_FILE=$JTFRAME/hdl/ver/fast_pll.v
MACROPREFIX=+define+
EXTRA=
SHOWCMD=
ARGNUMBER=1
SAMPLING_RATE=
TESTCPP=
GATES=NO
MACOS=NO
SED="sed -i"

rm -f test2.bin
rm -f video.pipe
rm -f macros.f

if [ `uname` = Darwin ]; then
    MACOS=YES
    # BSD version for sed command
    SED="sed -i bak"
fi

# delete previous .f files
echo -n > jtsim_vhdl.f
echo -n > jtsim.f

# Delete these files if there is a problem
trap "rm -f video.raw video.pipe" EXIT

function show_help {
        cat << EOF
JTFRAME simulation tool. (c) Jose Tejada 2019, @topapate
    -d        Add specific Verilog macros for the simulation.
              Use -help-macros to display all macros
              Some common options:
        VIDEO_START=X   video output will start on frame X
        DUMP_START=X    waveform dump will start on frame X
        DIP_TEST        Enable the test bit (active low)
        DIP_PAUSE       Enable the DIP PAUSE bit (active low)
        TESTSCR1        disable scroll control by the CPU and scroll the
                        background automatically. It can be used together with
                        NOMAIN macro
        SDRAM_DELAY=X   ns delay for SDRAM_CLK (cannot use with -slowpll)
        BASE_CLK=X      Base period for game clock (cannot use with -slowpll)
        SIMULATE_OSD    Simulate OSD display
        SIMINFO         Show simulation options available thorugh define commands
        SCANDOUBLER_DISABLE=1   Disables the scan doubler module
    -deep      Save all signals for scope verification
    -def       Path to a macro definition file to add to simulation
    -frame     Number of frames to simulate
    -gates     Gate-level simulation
    -inputs    Defines SIM_INPUTS macro:
               Game cabinet inputs will be taken from a sim_inputs.hex
               file. Each line contains a byte with the input status.
               All bits are read as active high. They are inverted
               if necessary by JTFRAME logic,
               The format is:
               bit  |  Meaning
               3:0  | start[1:0], coin[1:0]
               7:4  | joystick for 1P
                    | UP, DOWN, LEFT, RIGHT
               10:8 | buttons
                    | B3, B2, B1
               11   | test
    -iverilog  Use Icarus Verilog as the simulator
    -lint      Run verilator as lint tool
    -load      Load the ROM file using the SPI communication. Slower.
    -modelsim  Use ModelSim as the simulator
    -modules   Location of the modules folder with respect to the simulation folder
    -mist      Use MiST setup for simulation, instead of using directly the
               game module. This is slower but more informative.
    -ncverilog Select NCVerilog as the simulator
    -nochar    Disable CHAR hardware. Faster simulation.
    -noscr     Disable SCROLL hardware. Faster simulation.
    -nosnd     Disable SOUND hardware. Speeds up simulation a lot!
    -pause     Enable pause DIP setting. Same as -d DIP_PAUSE
    -srate     Sampling rate of the .wav file
    -stats     Run SDRAM usage analysis
    -synap     Use Synapticad's simulator
    -time      Number of milliseconds to simulate
    -test      Enable test DIP setting. Same as -d DIP_TEST
    -keepcpp   Do not overwrite the test.cpp file from the JTUTIL version
    -slowpll   Simulate using Altera's model for PLLs
    -showcmd   Display the simulation command only. Do not run any simulation.
    -sysname   Specify the name of the core
    -verilator Use Verilator as the simulator
    -video     Enable video output. Can be followed by a number to get
               the number of frames to simulate.
    -videow    Define the visible screen width  (only useful if -video is also used)
               If JTFRAME_WIDTH is defined in the .def file, this is not needed
    -videoh    Define the visible screen height (only useful if -video is also used)
               If JTFRAME_HEIGHT is defined in the .def file, this is not needed
    -w [#]     Save a small set of signals for scope verification. If a number
               is written after -w, the dump will start at that frame
EOF
}

function add_dir {
    if [ ! -d "$1" ]; then
        echo "ERROR: add_dir (sim.sh) failed because $1 is not a directory" 1>&2
        exit 1
    fi
    processF=no
    echo "Adding dir $1 $2" >&2
    for i in $(cat $1/$2); do
        if [ "$i" = "-sv" ]; then
            # ignore statements that iVerilog cannot understand
            continue;
        fi
        if [ "$processF" = yes ]; then
            processF=no
            # echo $(dirname $i) >&2
            # echo $(basename $i) >&2
            dn=$(dirname $i)
            if [ "$dn" = . ]; then
                dn=$1
            fi
            add_dir $dn $(basename $i)
            continue
        fi
        if [[ "$i" = -F || "$i" == -f ]]; then
            processF=yes
            continue
        fi
        # ignore comments
        if [ "${i:0:1}" = \# ]; then
            continue
        fi
        fn="$1/$i"
        if [ ! -e "$fn" ]; then
            (>&2 echo "Cannot find file $fn")
        fi
        echo $fn
    done
}

# iverilog does not have a -F command:
function emulate_F {
    oldIFS="$IFS"
    while IFS= read -r line; do
        if [ `expr "$line" : -F ` -eq 2 ]; then
            line=${line:3}
            dname=$(dirname "$line")
            fname=$(basename "$line")
            add_dir $dname $fname
        else
            echo "$line"
        fi
    done < $1
    IFS="$oldIFS"
}

function get_named_arg {
    ARGNAME="$1"
    shift
    while [ $# -gt 0 ]; do
        if [ "$1" = "$ARGNAME" ]; then
            echo $2
            return
        fi
        shift
    done
}

# Which core is this for?
SYSNAME=$(get_named_arg -sysname $*)
PERCORE=

if [ -z "$GAMETOP" ]; then
    GAMETOP=jt${SYSNAME}_game
    echo Using $GAMETOP as top module
fi

function check_qip {
    if ls ../../hdl/*.qip 2> /dev/null; then
        if grep --quiet "^[^#].*$1" ../../hdl/*.qip ; then
            echo 1
        else
            echo 0
        fi
    else
        echo 0
    fi
}

if [ -z "$JTFRAME" ]; then
    echo "You need to source the project setprj.sh"
    exit 1
fi
if [ -z "$MODULES" ]; then
    echo "Missing the modules path. You need to source the project setprj.sh"
    exit 1
fi

function add_macro {
    echo ${MACROPREFIX}$1 >> macros.f
}

if [ -z "$SYSNAME" ]; then
    if [[ "$1" = -help || "$1" = -h ]]; then
        show_help
        exit 0
    else
        echo "ERROR: Needs system name. Use -sysname"
        exit 1
    fi
fi

# First parse all the arguments in search of simulator arguments
for arg in $*; do
    case ${arg:1} in
        verilator|lint)
            SIMULATOR=verilator
            MACROPREFIX=-D
            EXTRA="$EXTRA --cc test.cpp --exe"
            ;;
        ncverilog|synapticad|modelsim|iverilog)
            SIMULATOR=${arg:1}
            MACROPREFIX=+define+
            ;;
    esac
done

if [ ! -e "rom.bin" ]; then
    echo "Error: cannot find ROM file rom.bin"
    exit 1
fi

while [ $# -gt 0 ]; do
case "$1" in
    -showcmd) SHOWCMD="echo";;
    -sysname) shift;; # ignore here
    -modules) shift;; # ignore here
    -w | -deep)
        add_macro DUMP
        DUMP=1
        if [ $1 = "-deep" ]; then add_macro DEEPDUMP; fi
        if [[ $2 =~ ^[0-9]+$ ]]; then
            # you can specify at which frame the dumping starts
            # right after -w or -deep
            shift
            add_macro DUMP_START=$1
        fi
        ;;
    -d)
        shift
        add_macro $1
        ;;
    -test)
        add_macro DIP_TEST;;
    -gates)
        GATES=YES
        if [ $SIMULATOR = verilator ]; then
            echo "Verilator cannot be used for gate-level sims"
            exit 1
        fi
        ;;
    -inputs)
        add_macro SIM_INPUTS;;
    -def)
        shift
        if [ ! -e "$1" ]; then
            echo "Cannot find macro definition file $1"
            exit 1
        fi
        DEFFILE="$1"
        ;;
    -keepcpp)
        shift
        TESTCPP=KEEP
        ;;
    -pause)
        add_macro DIP_PAUSE;;
    "-frame")
        shift
        if [ "$1" = "" ]; then
            echo "Must specify number of frames to simulate"
            exit 1
        fi
        add_macro MAXFRAME=$1
        echo Simulate up to $1 frames
        ;;
    -srate)
        shift
        if [ "$1" = "" ]; then
            echo "Must specify the sampling rate"
            exit 1
        fi
        SAMPLING_RATE="-s $1"
        ;;
    #################### Pocket setup
    -pocket)
        TOP=test
        TARGET=pocket
        add_macro POCKET
        ;;
    #################### MiST setup
    -mist)
        TOP=mist_test
        TARGET=mist
        rm -f mist.f
        MISTTOP=$JTFRAME/target/mist/jtframe_mist_top.sv
        for i in $JTFRAME/target/mist/ver/mist_test.v $MISTTOP; do
            echo $i >> mist.f
        done
        add_macro MIST
        ;;
    #################### MiSTer setup
    -mister|-mr)
        TOP=mister_test
        TARGET=mister
        if [ $SIMULATOR = iverilog ]; then
            FILES=$(add_dir $JTFRAME/target/mister mister.f)
        else
            FILES="-F $JTFRAME/target/mister/mister.f"
        fi

        if [ -e $JTROOT/hdl/jt${SYSNAME}.sv ]; then
            MISTTOP=../../hdl/jt${SYSNAME}_mister.sv
        else
            # jtgng cores share a common MiST top file
            MISTTOP=$MODULES/jtframe/target/mister/jtframe_emu.sv
            # Check if the conf_str.v file is present
            # and try to link to it if it is not here
            if [ ! -e conf_str.v ]; then
                if [ -e ../../mist/conf_str.v ]; then
                    ln -s ../../mist/conf_str.v
                fi
            fi
        fi
        FILES="$JTFRAME/target/mister/mister_test.v $MISTTOP $FILES"
        add_macro MISTER
        PLL_FILE=$JTROOT/modules/jtframe/target/mister/mister_pll48.v
        # Generate a fake build_id.v file
        echo "\`define BUILD_DATE \"190311\"" > build_id.v
        echo "\`define BUILD_TIME \"190311\"" >> build_id.v
        ;;
    ##########################
    "-slowpll")
        echo "INFO: Simulation will use the slow PLL model"
        MIST_PLL=altera_pll.f
        PLL_FILE="slow_pll.f"
        add_macro SLOWPLL
        ;;
    "-nosnd")
        add_macro NOSOUND
        add_macro NOFM
        add_macro NOSSG;;
    "-nocolmix")
        add_macro NOCOLMIX;;
    "-noscr")
        add_macro NOSCR;;
    "-nochar")
        add_macro NOCHAR;;
    "-time")
        shift
        if [ "$1" = "" ]; then
            echo "Must specify number of milliseconds to simulate"
            exit 1
        fi
        SIM_MS="$1"
        echo Simulate $1 ms
        ;;
    "-stats")
        add_macro JTFRAME_SDRAM_STATS
        echo RAM stats enabled
        ;;
    "-video")
        add_macro DUMP_VIDEO
        echo Video dump enabled
        if [ "${2:0:1}" != - ]; then
            # get number of frames to simulate
            shift
            add_macro MAXFRAME=$1
            echo Simulate up to $1 frames
        fi
        rm -f video.bin
        rm -f frame_*.jpg
        rm -f frame.raw
        VIDEO_DUMP=TRUE
        ;;
    -videow)
        shift
        JTFRAME_WIDTH=$1
        ;;
    -videoh)
        shift
        JTFRAME_HEIGHT=$1
        ;;
    "-load")
        add_macro LOADROM
        echo ROM load through SPI enabled
        ;;
    "-lint")
        # only possible with verilator
        EXTRA="$EXTRA --lint-only"
        add_macro LINT
        export LINT=
        ;;
    -ncverilog|-verilator|-synap|-modelsim|-iverilog)
        # This is parsed in the first argument loop
        ;;
    "-help-macros")
        cat $JTFRAME/doc/macros.md
        echo
        exit 0;;
    "-help")
        show_help
        exit 0
        ;;
    *) echo "Unknown option $1. Use -help to see the list of options"; exit 1;;
esac
    shift
    ARGNUMBER=$((ARGNUMBER+1))
done

# Add a local copy of the dump file if it doesn't exist
if [ ! -e ${TARGET}_dump.v ]; then
    cp $JTFRAME/target/$TARGET/ver/${TARGET}_dump.v .
    git add -v ${TARGET}_dump.v
fi
FILES="$FILES ${TARGET}_dump.v"

source jtsim_dep.sh

if [ $MACOS = YES ]; then
    GAME_ROM_LEN=$(stat -L -f %z rom.bin)
else
    GAME_ROM_LEN=$(stat -L -c%s rom.bin)
fi
add_macro GAME_ROM_LEN=${GAME_ROM_LEN}

# Use this function to create
# HEX files with initial contents for some of the RAMs
function clear_hex_file {
    cnt=0
    rm -f $1.hex
    while [ $cnt -lt $2 ]; do
        echo 0 >> $1.hex
        cnt=$((cnt+1))
    done
}

if [ ! -z "$EXTRA" ]; then
    echo Verilog macros: "$EXTRA"
fi

if [ ! -z "$MEM_CHECK_TIME" ]; then
    add_macro MEM_CHECK_TIME=$MEM_CHECK_TIME
fi

add_macro SYSTOP=jt${SYSNAME}_mist

# Add the PLL (MiST only)
if [[ $TOP = mist_test || $TOP = mister_test ]]; then
    if [ "$MIST_PLL" != "" ]; then
        # Adds the Altera file with the PLL models
        if [ $SIMULATOR = iverilog ]; then
            add_dir $JTFRAME/target/mist $MIST_PLL >> mist.f
        else
            FILES="$FILES -F $JTFRAME/target/mist/$MIST_PLL"
        fi
    else
        # Adds the .f file with the PLL modules
        echo "$PLL_FILE" >> mist.f
    fi
fi

# Search for a macro definition file
# Only supported for iverilog and ncverilog

if [ -z "$DEFFILE" ]; then
    if ! go run $JTFRAME/bin/jt{cfgstr,def}.go -target=$TARGET -output=$SIMULATOR -core $SYSNAME > core.def; then
        cat core.def
        exit 1
    fi
    COREDEF="-f core.def"
    $SED /JTFRAME_CREDITS/d core.def
else
    COREDEF=
    add_macro GAMETOP=jt${SYSNAME}_game
fi

# Verilator sims do their own image conversion
if [[ "$VIDEO_DUMP" = TRUE && $SIMULATOR != verilator ]]; then
    rm -f video.pipe
    mkfifo video.pipe
    raw2png -w $JTFRAME_WIDTH -h $JTFRAME_HEIGHT -f video.pipe : $CONVERT_OPTIONS&
fi

# Link to hex files in HDL folder
for i in ../../hdl/*.hex; do
    if [ $i = "../../hdl/*.hex" ]; then
        break
    fi
    ln -fs $i $(basename $i)
done


# Common macros
add_macro SIM_MS=$SIM_MS
add_macro SIMULATION

if [ $GATES = NO ]; then
    # Prepare all file lists
    go run $JTFRAME/bin/jtfiles.go -core $SYSNAME -f sim -rel -target "$TARGET" || exit $?
    # Remove duplicated lines
    rm -f tmp.f
    rm -f game_env.f
    # Simulator-specific needs
    case $SIMULATOR in
        verilator)
            # Add definitions in mist.f that are commonly used
            # outside the MiST testbench too
            $SED "/\.vhd/d" game.f
            $SED "/\.qip/d" game.f;;
        ncverilog)
            # quotes need escaping in ncverilog
            $SED 's/"/\\"/g' macros.f;;
        modelsim)
            # ' induces new line by modelsim
            $SED "s/'h/\\\\'h/g" core.def;;
        iverilog)
            # Remove references to fx68k as it is not supported in iverilog
            $SED /fx68k/d game.f;;
    esac
    cat game.f jtsim_vhdl.f jtsim.f >> tmp.f
    cat tmp.f | envsubst | grep -v "^#" | xargs realpath --relative-to=. | sort | uniq > game_env.f
    cat macros.f >> game_env.f
    # Take out .vhd definitions
    grep \.vhd game_env.f >> jtsim_vhdl.f
    $SED /.vhd/d game_env.f
    # Sort and delete duplicates
    emulate_F game_env.f | sort | uniq > filtered.f
    rm -f game_env.f tmp.f
else
    # Gate-level simulation uses the synthesis output directly
    GATENETLIST=$CORES/$SYSNAME/mist/simulation/ncsim/jt${SYSNAME}_8_1200mv_85c_slow.vo
    if [ ! -e "$GATENETLIST" ]; then
        echo "Error: cannot open the gate-level netlist. Looking for file"
        echo "$GATENETLIST"
        echo "Generate it using Quartus II, for the MiST core files"
        exit 1
    fi
    QPATH=`which quartus`
    if [[ -z "$QPATH" ]]; then
        echo "Error: Quartus is not in the PATH"
        exit 1
    fi
    QPATH=${QPATH%quartus/bin/quartus}/modelsim_ae/altera/verilog/src
    if [ ! -d "$QPATH" ]; then
        echo "Cannot find the path to Quartus simulation files"
        echo Looking at "$QPATH"
        exit 1
    fi
    echo $GATENETLIST > filtered.f
    echo $QPATH/{altera_primitives,cycloneiii_atoms}.v >> filtered.f
    echo $JTFRAME/target/mist/mist_test.v \
mist_dump.v \
+define+GATES \
>> filtered.f
    cat macros.f >> filtered.f
    # Remove MiST definitions
    FILES=
fi

case $SIMULATOR in
iverilog)
    SIMEXE=sim

    $SHOWCMD iverilog -g2005-sv $FILES $COREDEF \
        -f filtered.f -f target.f \
        -s $TOP -o $SIMEXE \
        -DIVERILOG $EXTRA \
        -DDUMP_VIDEO_FNAME=\"video.pipe\" \
    || exit 1
    $SHOWCMD $SIMEXE -lxt
    rm -f $SIMEXE;;
modelsim)
    # vcom compiles VHDL, vlog compiles verilog
    $SHOWCMD vcom $COREDEF -f jtsim_vhdl.f || exit $?
    $SHOWCMD vlog +initwireX \
        $COREDEF -f target.f -f filtered.f \
        $EXTRA +define+DUMP_VIDEO_FNAME=\"video.pipe\" \
        $FILES || exit $?
    echo calling vsim $TOP
    # The simulation script can be replaced locally
    if [ ! -e vsim.do ]; then
        cat >vsim.do <<EOF
run -all
EOF
    fi
    vsim -64 -batch -do "do vsim.do" $TOP || exit $?
    ;;
synapticad)
    # ls $JTFRAME/hdl/cpu/t80/T80{pa,_ALU,_Reg,_MCode,"",s}.vhd >> jtsim_vhdl.f
    $SHOWCMD simx +access+r +define+SYNAPTICAD +timescale+1ns/1ps\
        -f filtered.f -f target.f $FILES \
        +scd_top+$TOP \
        $COREDEF \
        +define+DUMP_VIDEO_FNAME=\"video.pipe\" \
        $EXTRA -l /dev/null || exit $?;;
ncverilog)
    # ls $JTFRAME/hdl/cpu/t80/T80{pa,_ALU,_Reg,_MCode,"",s}.vhd >> jtsim_vhdl.f
    $SHOWCMD ncverilog +access+r +nc64bit +define+NCVERILOG +nctimescale+1ns/1ps\
        -mcmaxcores 3 -mccodegen \
        -sysv -f filtered.f -f jtsim_vhdl.f -f target.f \
        -disable_sem2009 $FILES \
        +nctop+$TOP \
        -ncvhdl_args,-V93 \
        $COREDEF \
        +define+DUMP_VIDEO_FNAME=\"video.pipe\" \
        -nowarn "MCONDE" -nowarn "NOCOND" -nowarn "RECOME" -nowarn "ZROMCW" \
        $EXTRA -l /dev/null || exit $?;;
verilator)
    TRACE=$(if [ ! -z "$DUMP" ]; then echo --trace; fi)
    export CPPFLAGS=-O1
    if [ ! -z "$TRACE" ]; then
        export CPPFLAGS="$CPPFLAGS -DVERILATOR_TRACE"
    fi
    if [ -z "$TESTCPP" ]; then
        cp $JTFRAME/hdl/ver/test.cpp .
        cp $JTFRAME/hdl/ver/game_test.v .
    fi
    rm -f defmacros.h
    if [ ! -z "$DEFFILE" ]; then
        go run $JTFRAME/bin/jt{cfgstr,def}.go -target=$TARGET -output=cpp -parse $DEFFILE > defmacros.h
        echo "// Macros from command line " >> defmacros.h
    fi
    # Import macros for simulation
    cat macros.f >> defmacros.h
    $SED "s/$MACROPREFIX/#define /" defmacros.h
    $SED "s/=/ /" defmacros.h
    # Convert " to \" so verilator parses string macros correctly
    $SED 's/"/\\"/g' filtered.f
    # verilog to C++ conversion
    GAME_VLT=
    if [ -e game.vlt ]; then
        GAME_VLT=game.vlt
    fi
    # Ignore FX68k in Verilator sims
    $SED '/fx68k/d' filtered.f
    $SHOWCMD verilator -I../../hdl --timescale 1ps/1ps \
        -f filtered.f game_test.v $COREDEF \
        -Wno-TIMESCALEMOD --timescale-override 1ns/1ps -Wno-fatal \
        --top-module game_test -o sim \
         $EXTRA $TRACE --prefix UUT --assert \
         -Wwarn-UNDRIVEN --waiver-output waiver $GAME_VLT \
        || exit $?
    # boost C++ optimization without affecting other settings
    # export CPPFLAGS=`echo "$CPPFLAGS" | sed s/-O1/-O3/`
    if ! make -j -C obj_dir -f UUT.mk sim > make.log; then
        cat make.log
        exit $?
    fi
    if echo "$EXTRA" | grep -q lint-only; then
        echo "Lint only: no simulation "
    else
        # Run the simulation
        rm -f test.vcd
        if [[ -n "$DUMP" && -z "$SHOWCMD" ]]; then
            if which vcd2fst > /dev/null; then
                mkfifo test.vcd
                vcd2fst -p test.vcd test.fst&
            fi
        fi
        $SHOWCMD obj_dir/sim $TRACE -time $SIM_MS || echo "Verilator sim exit code $?"
        rm -f test.vcd
        if [ ! -z "$SHOWCMD" ]; then exit 0; fi
    fi
esac

rm -f video.pipe
rm -f frame.raw
rm -f filtered.f  game.f  jtsim.f  jtsim_vhdl.f  macros.f  mist.f  simfile.f
# killall --quiet raw2png

# convert raw sound file to wav format
if [ -e sound.raw ]; then
    $JTUTIL/bin/raw2wav $SAMPLING_RATE < sound.raw
    rm -f sound.raw
fi
