#!/bin/bash
# Do not accept errors:
set -e

function is_dirty {
    git status --short | grep -i "^ M " > /dev/null
}

# Merges changes from wip branch into master
LAST=`git tag | grep "^v" | sort | tail -n 1`
LAST=${LAST:1}
EDITS="edits_$LAST"

WIP=`git branch --show-current`

M=`echo $LAST|cut -d . -f 1`
F=`echo $LAST|cut -d . -f 2`
P=`echo $LAST|cut -d . -f 3`

NEXT=
case "$1" in
    -e|--edit)
        git checkout -b $EDITS
        exit 0;;
    -p|--patch)
        NEXT=v${M}.${F}.$((P+1));;
    -f|--feature)
        NEXT=v${M}.$((F+1)).0;;
    -m|--major)
        NEXT=v$((M+1)).0.0;;
    -v|--version)
        echo v$LAST
        exit 0;;
    ""|-h|--help)
        cat<<EOF
jtmerge merges a feature branch into the master branch and advances the version number

    -e | --edit    Creates a branch for new edits called edits_$LAST
    -v | --version Shows the current version

    -m | --major   Advances the major number and sets the rest to zero
    -f | --feature Advances the feature number and sets the patch to zero
    -p | --patch   Advances the patch number (third digit)

You must specify at least one argument. If the editing branch matches the
name edits_$LAST, it will be deleted after the merge
EOF
        exit 0
        ;;
    *)
        echo "Unknown argument $1"
        exit 1;;
esac

if [ $WIP = master ]; then
    echo "Call jtmerge from the feature branch."
    exit 1
fi

if is_dirty; then
    echo "Commit your changes before attempting a merge"
    exit 1
fi

git checkout master
git pull
git merge $WIP
git push
git tag $NEXT
git push --tags


if git branch -a | grep -q $EDITS; then
    git branch -d $EDITS
else
    git checkout $WIP
fi